/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PromptResult as PrismaPromptResult,
  Prompt as PrismaPrompt,
  Transcription as PrismaTranscription,
} from "@prisma/client";

export class PromptResultServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PromptResultCountArgs, "select">
  ): Promise<number> {
    return this.prisma.promptResult.count(args);
  }

  async promptResults(
    args: Prisma.PromptResultFindManyArgs
  ): Promise<PrismaPromptResult[]> {
    return this.prisma.promptResult.findMany(args);
  }
  async promptResult(
    args: Prisma.PromptResultFindUniqueArgs
  ): Promise<PrismaPromptResult | null> {
    return this.prisma.promptResult.findUnique(args);
  }
  async createPromptResult(
    args: Prisma.PromptResultCreateArgs
  ): Promise<PrismaPromptResult> {
    return this.prisma.promptResult.create(args);
  }
  async updatePromptResult(
    args: Prisma.PromptResultUpdateArgs
  ): Promise<PrismaPromptResult> {
    return this.prisma.promptResult.update(args);
  }
  async deletePromptResult(
    args: Prisma.PromptResultDeleteArgs
  ): Promise<PrismaPromptResult> {
    return this.prisma.promptResult.delete(args);
  }

  async getPrompt(parentId: string): Promise<PrismaPrompt | null> {
    return this.prisma.promptResult
      .findUnique({
        where: { id: parentId },
      })
      .prompt();
  }

  async getTranscription(
    parentId: string
  ): Promise<PrismaTranscription | null> {
    return this.prisma.promptResult
      .findUnique({
        where: { id: parentId },
      })
      .transcription();
  }
}
