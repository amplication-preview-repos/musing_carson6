/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PromptResult } from "./PromptResult";
import { PromptResultCountArgs } from "./PromptResultCountArgs";
import { PromptResultFindManyArgs } from "./PromptResultFindManyArgs";
import { PromptResultFindUniqueArgs } from "./PromptResultFindUniqueArgs";
import { CreatePromptResultArgs } from "./CreatePromptResultArgs";
import { UpdatePromptResultArgs } from "./UpdatePromptResultArgs";
import { DeletePromptResultArgs } from "./DeletePromptResultArgs";
import { Prompt } from "../../prompt/base/Prompt";
import { Transcription } from "../../transcription/base/Transcription";
import { PromptResultService } from "../promptResult.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PromptResult)
export class PromptResultResolverBase {
  constructor(
    protected readonly service: PromptResultService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PromptResult",
    action: "read",
    possession: "any",
  })
  async _promptResultsMeta(
    @graphql.Args() args: PromptResultCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PromptResult])
  @nestAccessControl.UseRoles({
    resource: "PromptResult",
    action: "read",
    possession: "any",
  })
  async promptResults(
    @graphql.Args() args: PromptResultFindManyArgs
  ): Promise<PromptResult[]> {
    return this.service.promptResults(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PromptResult, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PromptResult",
    action: "read",
    possession: "own",
  })
  async promptResult(
    @graphql.Args() args: PromptResultFindUniqueArgs
  ): Promise<PromptResult | null> {
    const result = await this.service.promptResult(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PromptResult)
  @nestAccessControl.UseRoles({
    resource: "PromptResult",
    action: "create",
    possession: "any",
  })
  async createPromptResult(
    @graphql.Args() args: CreatePromptResultArgs
  ): Promise<PromptResult> {
    return await this.service.createPromptResult({
      ...args,
      data: {
        ...args.data,

        prompt: args.data.prompt
          ? {
              connect: args.data.prompt,
            }
          : undefined,

        transcription: args.data.transcription
          ? {
              connect: args.data.transcription,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PromptResult)
  @nestAccessControl.UseRoles({
    resource: "PromptResult",
    action: "update",
    possession: "any",
  })
  async updatePromptResult(
    @graphql.Args() args: UpdatePromptResultArgs
  ): Promise<PromptResult | null> {
    try {
      return await this.service.updatePromptResult({
        ...args,
        data: {
          ...args.data,

          prompt: args.data.prompt
            ? {
                connect: args.data.prompt,
              }
            : undefined,

          transcription: args.data.transcription
            ? {
                connect: args.data.transcription,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PromptResult)
  @nestAccessControl.UseRoles({
    resource: "PromptResult",
    action: "delete",
    possession: "any",
  })
  async deletePromptResult(
    @graphql.Args() args: DeletePromptResultArgs
  ): Promise<PromptResult | null> {
    try {
      return await this.service.deletePromptResult(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Prompt, {
    nullable: true,
    name: "prompt",
  })
  @nestAccessControl.UseRoles({
    resource: "Prompt",
    action: "read",
    possession: "any",
  })
  async getPrompt(
    @graphql.Parent() parent: PromptResult
  ): Promise<Prompt | null> {
    const result = await this.service.getPrompt(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Transcription, {
    nullable: true,
    name: "transcription",
  })
  @nestAccessControl.UseRoles({
    resource: "Transcription",
    action: "read",
    possession: "any",
  })
  async getTranscription(
    @graphql.Parent() parent: PromptResult
  ): Promise<Transcription | null> {
    const result = await this.service.getTranscription(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
