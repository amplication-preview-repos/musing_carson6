/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request, Response } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { FileInterceptor } from "@nestjs/platform-express";
import { TranscriptionService } from "../transcription.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TranscriptionCreateInput } from "./TranscriptionCreateInput";
import { Transcription } from "./Transcription";
import { TranscriptionFindManyArgs } from "./TranscriptionFindManyArgs";
import { TranscriptionWhereUniqueInput } from "./TranscriptionWhereUniqueInput";
import { TranscriptionUpdateInput } from "./TranscriptionUpdateInput";
import { PromptResultFindManyArgs } from "../../promptResult/base/PromptResultFindManyArgs";
import { PromptResult } from "../../promptResult/base/PromptResult";
import { PromptResultWhereUniqueInput } from "../../promptResult/base/PromptResultWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TranscriptionControllerBase {
  constructor(
    protected readonly service: TranscriptionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Transcription })
  @nestAccessControl.UseRoles({
    resource: "Transcription",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: TranscriptionCreateInput,
  })
  async createTranscription(
    @common.Body() data: TranscriptionCreateInput
  ): Promise<Transcription> {
    return await this.service.createTranscription({
      data: data,
      select: {
        audioFile: true,
        createdAt: true,
        id: true,
        status: true,
        transcript: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Transcription] })
  @ApiNestedQuery(TranscriptionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Transcription",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async transcriptions(
    @common.Req() request: Request
  ): Promise<Transcription[]> {
    const args = plainToClass(TranscriptionFindManyArgs, request.query);
    return this.service.transcriptions({
      ...args,
      select: {
        audioFile: true,
        createdAt: true,
        id: true,
        status: true,
        transcript: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Transcription })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Transcription",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async transcription(
    @common.Param() params: TranscriptionWhereUniqueInput
  ): Promise<Transcription | null> {
    const result = await this.service.transcription({
      where: params,
      select: {
        audioFile: true,
        createdAt: true,
        id: true,
        status: true,
        transcript: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Transcription })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Transcription",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: TranscriptionUpdateInput,
  })
  async updateTranscription(
    @common.Param() params: TranscriptionWhereUniqueInput,
    @common.Body() data: TranscriptionUpdateInput
  ): Promise<Transcription | null> {
    try {
      return await this.service.updateTranscription({
        where: params,
        data: data,
        select: {
          audioFile: true,
          createdAt: true,
          id: true,
          status: true,
          transcript: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Transcription })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Transcription",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTranscription(
    @common.Param() params: TranscriptionWhereUniqueInput
  ): Promise<Transcription | null> {
    try {
      return await this.service.deleteTranscription({
        where: params,
        select: {
          audioFile: true,
          createdAt: true,
          id: true,
          status: true,
          transcript: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Put(":id/audioFile")
  @common.UseInterceptors(FileInterceptor("file"))
  @swagger.ApiConsumes("multipart/form-data")
  @swagger.ApiBody({
    schema: {
      type: "object",

      properties: {
        file: {
          type: "string",
          format: "binary",
        },
      },
    },
  })
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiCreatedResponse({
    type: Transcription,
    status: "2XX",
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async uploadAudioFile(
    @common.Param()
    params: TranscriptionWhereUniqueInput,
    @common.UploadedFile()
    file: Express.Multer.File
  ): Promise<Transcription> {
    return this.service.uploadAudioFile(
      {
        where: params,
      },
      Object.assign(file, {
        filename: file.originalname,
      })
    );
  }

  @common.Get(":id/audioFile")
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiOkResponse({
    type: common.StreamableFile,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async downloadAudioFile(
    @common.Param()
    params: TranscriptionWhereUniqueInput,
    @common.Res({
      passthrough: true,
    })
    res: Response
  ): Promise<common.StreamableFile> {
    const result = await this.service.downloadAudioFile({
      where: params,
    });

    if (result === null) {
      throw new errors.NotFoundException(
        "No resource was found for ",
        JSON.stringify(params)
      );
    }

    res.setHeader(
      "Content-Disposition",
      `attachment; filename=${result.filename}`
    );
    res.setHeader("Content-Type", result.mimetype);
    return result.stream;
  }

  @common.Delete(":id/audioFile")
  @swagger.ApiOkResponse({
    type: Transcription,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async deleteAudioFile(
    @common.Param()
    params: TranscriptionWhereUniqueInput
  ): Promise<Transcription> {
    return this.service.deleteAudioFile({
      where: params,
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/promptResults")
  @ApiNestedQuery(PromptResultFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PromptResult",
    action: "read",
    possession: "any",
  })
  async findPromptResults(
    @common.Req() request: Request,
    @common.Param() params: TranscriptionWhereUniqueInput
  ): Promise<PromptResult[]> {
    const query = plainToClass(PromptResultFindManyArgs, request.query);
    const results = await this.service.findPromptResults(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        prompt: {
          select: {
            id: true,
          },
        },

        result: true,
        status: true,

        transcription: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/promptResults")
  @nestAccessControl.UseRoles({
    resource: "Transcription",
    action: "update",
    possession: "any",
  })
  async connectPromptResults(
    @common.Param() params: TranscriptionWhereUniqueInput,
    @common.Body() body: PromptResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      promptResults: {
        connect: body,
      },
    };
    await this.service.updateTranscription({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/promptResults")
  @nestAccessControl.UseRoles({
    resource: "Transcription",
    action: "update",
    possession: "any",
  })
  async updatePromptResults(
    @common.Param() params: TranscriptionWhereUniqueInput,
    @common.Body() body: PromptResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      promptResults: {
        set: body,
      },
    };
    await this.service.updateTranscription({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/promptResults")
  @nestAccessControl.UseRoles({
    resource: "Transcription",
    action: "update",
    possession: "any",
  })
  async disconnectPromptResults(
    @common.Param() params: TranscriptionWhereUniqueInput,
    @common.Body() body: PromptResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      promptResults: {
        disconnect: body,
      },
    };
    await this.service.updateTranscription({
      where: params,
      data,
      select: { id: true },
    });
  }
}
