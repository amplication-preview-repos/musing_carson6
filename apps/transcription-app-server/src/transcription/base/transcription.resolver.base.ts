/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { GraphQLUpload } from "graphql-upload";
import { FileUpload } from "src/storage/base/storage.types";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Transcription } from "./Transcription";
import { TranscriptionCountArgs } from "./TranscriptionCountArgs";
import { TranscriptionFindManyArgs } from "./TranscriptionFindManyArgs";
import { TranscriptionFindUniqueArgs } from "./TranscriptionFindUniqueArgs";
import { CreateTranscriptionArgs } from "./CreateTranscriptionArgs";
import { UpdateTranscriptionArgs } from "./UpdateTranscriptionArgs";
import { DeleteTranscriptionArgs } from "./DeleteTranscriptionArgs";
import { PromptResultFindManyArgs } from "../../promptResult/base/PromptResultFindManyArgs";
import { PromptResult } from "../../promptResult/base/PromptResult";
import { TranscriptionService } from "../transcription.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Transcription)
export class TranscriptionResolverBase {
  constructor(
    protected readonly service: TranscriptionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Transcription",
    action: "read",
    possession: "any",
  })
  async _transcriptionsMeta(
    @graphql.Args() args: TranscriptionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Transcription])
  @nestAccessControl.UseRoles({
    resource: "Transcription",
    action: "read",
    possession: "any",
  })
  async transcriptions(
    @graphql.Args() args: TranscriptionFindManyArgs
  ): Promise<Transcription[]> {
    return this.service.transcriptions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Transcription, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Transcription",
    action: "read",
    possession: "own",
  })
  async transcription(
    @graphql.Args() args: TranscriptionFindUniqueArgs
  ): Promise<Transcription | null> {
    const result = await this.service.transcription(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Transcription)
  @nestAccessControl.UseRoles({
    resource: "Transcription",
    action: "create",
    possession: "any",
  })
  async createTranscription(
    @graphql.Args() args: CreateTranscriptionArgs
  ): Promise<Transcription> {
    return await this.service.createTranscription({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Transcription)
  @nestAccessControl.UseRoles({
    resource: "Transcription",
    action: "update",
    possession: "any",
  })
  async updateTranscription(
    @graphql.Args() args: UpdateTranscriptionArgs
  ): Promise<Transcription | null> {
    try {
      return await this.service.updateTranscription({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Transcription)
  @nestAccessControl.UseRoles({
    resource: "Transcription",
    action: "delete",
    possession: "any",
  })
  async deleteTranscription(
    @graphql.Args() args: DeleteTranscriptionArgs
  ): Promise<Transcription | null> {
    try {
      return await this.service.deleteTranscription(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Transcription)
  async uploadAudioFile(
    @graphql.Args({
      name: "file",
      type: () => GraphQLUpload,
    })
    file: FileUpload,
    @graphql.Args()
    args: TranscriptionFindUniqueArgs
  ): Promise<Transcription> {
    return await this.service.uploadAudioFile(args, file);
  }

  @graphql.Mutation(() => Transcription)
  async deleteAudioFile(
    @graphql.Args()
    args: TranscriptionFindUniqueArgs
  ): Promise<Transcription> {
    return await this.service.deleteAudioFile(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PromptResult], { name: "promptResults" })
  @nestAccessControl.UseRoles({
    resource: "PromptResult",
    action: "read",
    possession: "any",
  })
  async findPromptResults(
    @graphql.Parent() parent: Transcription,
    @graphql.Args() args: PromptResultFindManyArgs
  ): Promise<PromptResult[]> {
    const results = await this.service.findPromptResults(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
